library(plyr)
library(dplyr)
library(lme4)
# DATA HANDLING
# Import data, from both Category and SingleObject
LT.SingObj <- read.csv("../Results/SingleObject_LT.csv", head=TRUE)
LT.Cat <- read.csv("../Results/Category_LT.csv", head=TRUE)
# Create experiment variable for each dataset
LT.SingObj$experiment <- "SingleObject"
LT.Cat$experiment <- "Category"
# Increment subject from Cat to not overlap with SingObj
n_subjects <- tail(LT.SingObj$subject, n=1) + 1
LT.Cat$subject <- LT.Cat$subject + n_subjects
# Set all factor variables to factors, with labels if meaningful
LT.SingObj$explo_overlap <- factor(LT.SingObj$explo_overlap)
LT.SingObj$theory <- factor(LT.SingObj$theory,
labels = c("Compound Representations",
"Labels as Features"))
LT.Cat$explo_overlap <- factor(LT.Cat$explo_overlap)
LT.Cat$theory <- factor(LT.Cat$theory, labels = c("Compound Representations",
"Labels as Features"))
# Merge both datasets
LT <- rbind(LT.SingObj, LT.Cat)
LT$experiment <- factor(LT$experiment,
labels = c("Category",
"Single Object"))
f <- looking_time ~ 1 + trial + labelled + theory +
trial:labelled + labelled:theory + trial:theory +
trial:labelled:theory +
(1 + trial + labelled | subject)
f
is.formula(f)
str(f)
summary(f)
f[1]
f[0]
f[2]
f[3]
f[4]
summary(f[3])
?drop1.merMod
?lattice::latticeParseFormula()
mixed.vec <- strapplyc(format(f), "[(] *(\\w+) *[|] *(\\w+) *[)]")[[1]]
??strapplyc
?strapplyc
??strapplyc
library(gsubfn)
install.packages("gsubfn")
?strapplyc
??strapplyc
library(gsubfn)
?strapplyc
mixed.vec <- strapplyc(format(f), "[(] *(\\w+) *[|] *(\\w+) *[)]")[[1]]
format(f)
mixed.vec <- strapplyc(as.character(f)[3], "[(] *(\\w+) *[|] *(\\w+) *[)]")[[1]]
?terms
t <- terms(f)
t
f
t
t[1]
t[2]
t[3]
t[4]
length(t)
t$variables
t$lst
t$list
t$factors
t.factors
factors(t)
attr(t,"variables")
attr(t,"factors")
attr(t,"term.labels")
attr(t,"order")
t1 <- drop.terms(t,8)
t1
t <- terms(f, keep.order = T)
attr(t,"term.labels")
t1 <- drop.terms(t,7)
attr(t1,"term.labels")
f1 <- formula(t1)
f1
f1 <- update(f, . ~ . - attr(t,"term.labels")[7])
f1
attr(t,"term.labels")[7]
LT.SingObj.lmer.0 <- lmer(looking_time ~ 1 + trial + labelled + theory +
trial:labelled + labelled:theory + trial:theory +
trial:labelled:theory +
(1 + trial + labelled | subject),
data = LT.SingObj)
LT.SingObj.lmer.1 <- update(LT.SingObj.lmer.0, . ~ . - attr(t,"term.labels")[7])
formula(LT.SingObj.lmer.1)
terms(attr(t,"term.labels"))
mixed <- "(1 + trial + labelled | subject)"
mixed.f <- formula(mixed)
mixed.f <- as.formula(mixed)
# LIBRARY IMPORTS
library(ggplot2)
library(broom)
library(reshape2)
library(plyr)
library(dplyr)
library(lme4)
# DATA HANDLING
# Import data, from both Category and SingleObject
LT.SingObj <- read.csv("../Results/SingleObject_LT.csv", head=TRUE)
LT.Cat <- read.csv("../Results/Category_LT.csv", head=TRUE)
# Create experiment variable for each dataset
LT.SingObj$experiment <- "SingleObject"
LT.Cat$experiment <- "Category"
# Increment subject from Cat to not overlap with SingObj
n_subjects <- tail(LT.SingObj$subject, n=1) + 1
LT.Cat$subject <- LT.Cat$subject + n_subjects
# Set all factor variables to factors, with labels if meaningful
LT.SingObj$explo_overlap <- factor(LT.SingObj$explo_overlap)
LT.SingObj$theory <- factor(LT.SingObj$theory,
labels = c("Compound Representations",
"Labels as Features"))
LT.Cat$explo_overlap <- factor(LT.Cat$explo_overlap)
LT.Cat$theory <- factor(LT.Cat$theory, labels = c("Compound Representations",
"Labels as Features"))
# Merge both datasets
LT <- rbind(LT.SingObj, LT.Cat)
LT$experiment <- factor(LT$experiment,
labels = c("Category",
"Single Object"))
# LIBRARY IMPORTS
library(ggplot2)
library(broom)
library(reshape2)
library(plyr)
library(dplyr)
library(lme4)
# DATA HANDLING
# Import data, from both Category and SingleObject
LT.SingObj <- read.csv("../Results/SingleObject_LT.csv", head=TRUE)
LT.Cat <- read.csv("../Results/Category_LT.csv", head=TRUE)
# Set all factor variables to factors, with labels if meaningful
LT.SingObj$explo_overlap <- factor(LT.SingObj$explo_overlap)
LT.SingObj$theory <- factor(LT.SingObj$theory,
labels = c("Compound Representations",
"Labels as Features"))
LT.Cat$explo_overlap <- factor(LT.Cat$explo_overlap)
LT.Cat$theory <- factor(LT.Cat$theory, labels = c("Compound Representations",
"Labels as Features"))
# SINGLE OBJECT MODEL -- FIXED EFFECTS
# All models taken as previous one minus last effect
LT.SingObj.lmer.0 <- lmer(looking_time ~ 1 + trial + labelled + theory +
trial:labelled + labelled:theory + trial:theory +
trial:labelled:theory +
(1 + trial + labelled | subject),
data = LT.SingObj)
LT.SingObj.lmer.1 <- update(LT.SingObj.lmer.0, . ~ . - trial:labelled:theory)
LT.SingObj.lmer.2 <- update(LT.SingObj.lmer.1, . ~ . - trial:theory)
LT.SingObj.lmer.3 <- update(LT.SingObj.lmer.2, . ~ . - labelled:theory)
LT.SingObj.lmer.4 <- update(LT.SingObj.lmer.3, . ~ . - trial:labelled)
LT.SingObj.lmer.5 <- update(LT.SingObj.lmer.4, . ~ . - theory)
LT.SingObj.lmer.6 <- update(LT.SingObj.lmer.5, . ~ . - labelled)
LT.SingObj.lmer.7 <- update(LT.SingObj.lmer.6, . ~ . - trial)
# Model comparison against each other hierarchically
LT.SingObj.comparison <- anova(LT.SingObj.lmer.7,
LT.SingObj.lmer.6,
LT.SingObj.lmer.5,
LT.SingObj.lmer.4,
LT.SingObj.lmer.3,
LT.SingObj.lmer.2,
LT.SingObj.lmer.1,
LT.SingObj.lmer.0)
print(LT.SingObj.comparison)
LT.SingObj.final <- LT.SingObj.lmer.0
LT.SingObj.lmer.final <- LT.SingObj.lmer.0
# SINGLE OBJECT PER THEORY -- MAIN EFFECTS
# Create sub-datasets
LT.SingObj.LaF <- LT.SingObj[LT.SingObj$theory == "Labels as Features",]
LT.SingObj.CR <- LT.SingObj[LT.SingObj$theory == "Compound Representations",]
# LABELS AS FEATURES
# All models taken as previous one minus last effect
LT.SingObj.LaF.lmer.0 <- lmer(looking_time ~ 1 + trial + labelled + trial:labelled +
(1 + trial + labelled | subject),
data = LT.SingObj.LaF) # Adding the interaction only marginally improved the model
LT.SingObj.LaF.lmer.1 <- update(LT.SingObj.LaF.lmer.0, . ~ . - trial:labelled)
LT.SingObj.LaF.lmer.2 <- update(LT.SingObj.LaF.lmer.1, . ~ . - labelled)
LT.SingObj.LaF.lmer.3 <- update(LT.SingObj.LaF.lmer.2, . ~ . - trial)
# Model comparison against each other hierarchically
LT.SingObj.LaF.comparison <- anova(LT.SingObj.LaF.lmer.3,
LT.SingObj.LaF.lmer.2,
LT.SingObj.LaF.lmer.1,
LT.SingObj.LaF.lmer.0)
print(LT.SingObj.LaF.comparison)
LT.SingObj.LaF.final <- LT.SingObj.LaF.lmer.0
LT.SingObj.CR.lmer.0 <- lmer(looking_time ~ 1 + trial + labelled + trial:labelled +
(1 + trial + labelled | subject),
data = LT.SingObj.CR)
LT.SingObj.CR.lmer.1 <- update(LT.SingObj.CR.lmer.0, . ~ . - trial:labelled) # No effect other than trial
LT.SingObj.CR.lmer.2 <- update(LT.SingObj.CR.lmer.1, . ~ . - labelled)
LT.SingObj.CR.lmer.3 <- update(LT.SingObj.CR.lmer.2, . ~ . - trial)
# Model comparison against each other hierarchically
LT.SingObj.CR.comparison <- anova(LT.SingObj.CR.lmer.3,
LT.SingObj.CR.lmer.2,
LT.SingObj.CR.lmer.1,
LT.SingObj.CR.lmer.0)
print(LT.SingObj.CR.comparison)
LT.SingObj.CR.final <- update(LT.SingObj.CR.lmer.0, . ~ . - labelled)
# CATEGORY MODEL -- FIXED EFFECTS
# All models taken as previous one minus last effect
LT.Cat.lmer.0 <- lmer(looking_time ~ 1 + trial + labelled + theory +
trial:labelled + labelled:theory + trial:theory
trial:labelled:theory +
(1 + trial + labelled | subject),
data = LT.Cat)
LT.Cat.lmer.1 <- update(LT.Cat.lmer.0, . ~ . - trial:labelled:theory)
LT.Cat.lmer.2 <- update(LT.Cat.lmer.1, . ~ . - trial:theory)
LT.Cat.lmer.3 <- update(LT.Cat.lmer.2, . ~ . - labelled:theory)
LT.Cat.lmer.4 <- update(LT.Cat.lmer.3, . ~ . - trial:labelled)
LT.Cat.lmer.5 <- update(LT.Cat.lmer.4, . ~ . - theory)
LT.Cat.lmer.6 <- update(LT.Cat.lmer.5, . ~ . - labelled)
LT.Cat.lmer.7 <- update(LT.Cat.lmer.6, . ~ . - trial)
# Model comparison against each other hierarchically
LT.Cat.comparison <- anova(LT.Cat.lmer.7,
LT.Cat.lmer.6,
LT.Cat.lmer.5,
LT.Cat.lmer.4,
LT.Cat.lmer.3,
LT.Cat.lmer.2,
LT.Cat.lmer.1,
LT.Cat.lmer.0)
print(LT.Cat.comparison)
# CATEGORY MODEL -- FIXED EFFECTS
# All models taken as previous one minus last effect
LT.Cat.lmer.0 <- lmer(looking_time ~ 1 + trial + labelled + theory +
trial:labelled + labelled:theory + trial:theory +
trial:labelled:theory +
(1 + trial + labelled | subject),
data = LT.Cat)
LT.Cat.lmer.1 <- update(LT.Cat.lmer.0, . ~ . - trial:labelled:theory)
LT.Cat.lmer.2 <- update(LT.Cat.lmer.1, . ~ . - trial:theory)
LT.Cat.lmer.3 <- update(LT.Cat.lmer.2, . ~ . - labelled:theory)
LT.Cat.lmer.4 <- update(LT.Cat.lmer.3, . ~ . - trial:labelled)
LT.Cat.lmer.5 <- update(LT.Cat.lmer.4, . ~ . - theory)
LT.Cat.lmer.6 <- update(LT.Cat.lmer.5, . ~ . - labelled)
LT.Cat.lmer.7 <- update(LT.Cat.lmer.6, . ~ . - trial)
# Model comparison against each other hierarchically
LT.Cat.comparison <- anova(LT.Cat.lmer.7,
LT.Cat.lmer.6,
LT.Cat.lmer.5,
LT.Cat.lmer.4,
LT.Cat.lmer.3,
LT.Cat.lmer.2,
LT.Cat.lmer.1,
LT.Cat.lmer.0)
print(LT.Cat.comparison)
# CATEGORY PER THEORY -- MAIN EFFECTS
# Create sub-datasets
LT.Cat.LaF <- LT.Cat[LT.Cat$theory == "Labels as Features",]
LT.Cat.CR <- LT.Cat[LT.Cat$theory == "Compound Representations",]
# LABELS AS FEATURES
# All models taken as previous one minus last effect
LT.Cat.LaF.lmer.0 <- lmer(looking_time ~ 1 + trial + labelled + trial:labelled +
(1 + trial + labelled | subject),
data = LT.Cat.LaF)
LT.Cat.LaF.lmer.1 <- update(LT.Cat.LaF.lmer.0, . ~ . - trial:labelled)
LT.Cat.LaF.lmer.2 <- update(LT.Cat.LaF.lmer.1, . ~ . - labelled)
LT.Cat.LaF.lmer.3 <- update(LT.Cat.LaF.lmer.2, . ~ . - trial)
# Model comparison against each other hierarchically
LT.Cat.LaF.comparison <- anova(LT.Cat.LaF.lmer.3,
LT.Cat.LaF.lmer.2,
LT.Cat.LaF.lmer.1,
LT.Cat.LaF.lmer.0)
print(LT.Cat.LaF.comparison)
LT.Cat.CR.lmer.0 <- lmer(looking_time ~ 1 + trial + labelled + trial:labelled +
(1 + trial + labelled | subject),
data = LT.Cat.CR)
LT.Cat.CR.lmer.1 <- update(LT.Cat.CR.lmer.0, . ~ . - trial:labelled)
LT.Cat.CR.lmer.2 <- update(LT.Cat.CR.lmer.1, . ~ . - labelled)
LT.Cat.CR.lmer.3 <- update(LT.Cat.CR.lmer.2, . ~ . - trial)
# Model comparison against each other hierarchically
LT.Cat.CR.comparison <- anova(LT.Cat.CR.lmer.3,
LT.Cat.CR.lmer.2,
LT.Cat.CR.lmer.1,
LT.Cat.CR.lmer.0)
print(LT.Cat.CR.comparison)
source('~/LabelTime/stats/LookingTimeLMER.R')
summary(LT.SingObj.lmer.final)
summary(LT.SingObj.LaF.final)
summary(LT.SingObj.CR.final)
summary(LT.Cat.lmer.final)
summary(LT.Cat.LaF.final)
summary(LT.Cat.CR.final)
# LIBRARY IMPORTS
library(ggplot2)
library(Hmisc)
library(plyr)
library(lme4)
# DATA HANDLING
# Using results generated by HiddenRepresentations.R
distances <- read.csv(file="../Results/Category_hidden_distances.csv", header=T)
distances$step <- distances$step/100 # Rescale step to allow models to converge
# Select only absolute distances
distances <- distances[distances$dist_type %in% c("labelled","unlabelled"),]
# Select only LTM
distances <- distances[distances$memory_type=="LTM",]
# Set names for theories
levels(distances$theory) <- c("Compound Representations","Labels as Features")
# distances.evolution -- Remove step == 0 (i.e. representations at the end of background training)
distances.evol <- distances[distances$step!=0,]
# distances.trained -- Take only step == 0
distances.trained <- distances[distances$step==0,]
# GLOBAL MODEL -- FIXED EFFECTS
# Building models from top to bottom
distances.evol.lmer.0 <- lmer(mu ~ 1 + step + dist_type + theory +
step:dist_type + step:theory + dist_type:theory +
step:dist_type:theory +
(1 + step + dist_type | subject),
data=distances.evol)
distances.evol.lmer.1 <- update(distances.evol.lmer.0, . ~ . - step:dist_type:theory)
distances.evol.lmer.2 <- update(distances.evol.lmer.1, . ~ . - dist_type:theory)      # Delete step:theory
distances.evol.lmer.3 <- update(distances.evol.lmer.2, . ~ . - step:theory)
distances.evol.lmer.4 <- update(distances.evol.lmer.3, . ~ . - step:dist_type)
distances.evol.lmer.5 <- update(distances.evol.lmer.4, . ~ . - theory)
distances.evol.lmer.6 <- update(distances.evol.lmer.5, . ~ . - dist_type)
distances.evol.lmer.7 <- update(distances.evol.lmer.6, . ~ . - step)
# Comparing models from bottom to top
distances.evol.comparison <- anova(distances.evol.lmer.7,
distances.evol.lmer.6,
distances.evol.lmer.5,
distances.evol.lmer.4,
distances.evol.lmer.3,
distances.evol.lmer.2,
distances.evol.lmer.1,
distances.evol.lmer.0)
print(distances.evol.comparison)
summary(distances)
# DATA HANDLING
# Using results generated by HiddenRepresentations.R
distances <- read.csv(file="../results/Category_hidden_distances.csv", header=T)
distances$step <- distances$step/100 # Rescale step to allow models to converge
# Select only absolute distances
distances <- distances[distances$dist_type %in% c("labelled","unlabelled"),]
# Select only LTM
distances <- distances[distances$memory_type=="LTM",]
# Set names for theories
levels(distances$theory) <- c("Compound Representations","Labels as Features")
# distances.evolution -- Remove step == 0 (i.e. representations at the end of background training)
distances.evol <- distances[distances$step!=0,]
# distances.trained -- Take only step == 0
distances.trained <- distances[distances$step==0,]
# GLOBAL MODEL -- FIXED EFFECTS
# Building models from top to bottom
distances.evol.lmer.0 <- lmer(mu ~ 1 + step + dist_type + theory +
step:dist_type + step:theory + dist_type:theory +
step:dist_type:theory +
(1 + step + dist_type | subject),
data=distances.evol)
distances.evol.lmer.1 <- update(distances.evol.lmer.0, . ~ . - step:dist_type:theory)
distances.evol.lmer.2 <- update(distances.evol.lmer.1, . ~ . - dist_type:theory)      # Delete step:theory
distances.evol.lmer.3 <- update(distances.evol.lmer.2, . ~ . - step:theory)
distances.evol.lmer.4 <- update(distances.evol.lmer.3, . ~ . - step:dist_type)
distances.evol.lmer.5 <- update(distances.evol.lmer.4, . ~ . - theory)
distances.evol.lmer.6 <- update(distances.evol.lmer.5, . ~ . - dist_type)
distances.evol.lmer.7 <- update(distances.evol.lmer.6, . ~ . - step)
# Comparing models from bottom to top
distances.evol.comparison <- anova(distances.evol.lmer.7,
distances.evol.lmer.6,
distances.evol.lmer.5,
distances.evol.lmer.4,
distances.evol.lmer.3,
distances.evol.lmer.2,
distances.evol.lmer.1,
distances.evol.lmer.0)
print(distances.evol.comparison)
distances <- read.csv(file="../results/Category_hidden_distances.csv", header=T)
summary(distances)
distances$step <- distances$step/100 # Rescale step to allow models to converge
distances <- distances[distances$dist_type %in% c("labelled","unlabelled"),]
levels(distances$theory) <- c("Compound Representations","Labels as Features")
distances.evol <- distances[distances$step!=0,]
distances.trained <- distances[distances$step==0,]
distances.evol.lmer.0 <- lmer(mu ~ 1 + step + dist_type + theory +
step:dist_type + step:theory + dist_type:theory +
step:dist_type:theory +
(1 + step + dist_type | subject),
data=distances.evol)
distances.evol.lmer.1 <- update(distances.evol.lmer.0, . ~ . - step:dist_type:theory)
distances.evol.lmer.2 <- update(distances.evol.lmer.1, . ~ . - dist_type:theory)      # Delete step:theory
distances.evol.lmer.3 <- update(distances.evol.lmer.2, . ~ . - step:theory)
distances.evol.lmer.4 <- update(distances.evol.lmer.3, . ~ . - step:dist_type)
distances.evol.lmer.5 <- update(distances.evol.lmer.4, . ~ . - theory)
distances.evol.lmer.6 <- update(distances.evol.lmer.5, . ~ . - dist_type)
distances.evol.lmer.7 <- update(distances.evol.lmer.6, . ~ . - step)
# Comparing models from bottom to top
distances.evol.comparison <- anova(distances.evol.lmer.7,
distances.evol.lmer.6,
distances.evol.lmer.5,
distances.evol.lmer.4,
distances.evol.lmer.3,
distances.evol.lmer.2,
distances.evol.lmer.1,
distances.evol.lmer.0)
print(distances.evol.comparison)
distances.evol.lmer.final <- update(distances.evol.lmer.0, . ~ . - dist_type:theory - theory)
distances.evol.lmer.final <- update(distances.evol.lmer.0, . ~ . - dist_type:theory - dist_type)
distances.evol.LaF <- distances.evol[distances.evol$theory == "Labels as Features",]
distances.evol.CR <- distances.evol[distances.evol$theory == "Compound Representations",]
# LABELS AS FEATURES
# Building models from top to bottom
distances.evol.LaF.lmer.0 <- lmer(mu ~ 1 + step + dist_type +
step:dist_type +
(1 + step + dist_type | subject),
data=distances.evol.LaF)
distances.evol.LaF.lmer.1 <- update(distances.evol.LaF.lmer.0, . ~ . - step:dist_type)
distances.evol.LaF.lmer.2 <- update(distances.evol.LaF.lmer.1, . ~ . - dist_type)
distances.evol.LaF.lmer.3 <- update(distances.evol.LaF.lmer.2, . ~ . - step)
# Comparing models from bottom to top
distances.evol.LaF.comparison <- anova(distances.evol.LaF.lmer.3,
distances.evol.LaF.lmer.2,
distances.evol.LaF.lmer.1,
distances.evol.LaF.lmer.0)
print(distances.evol.LaF.comparison)
distances.evol.LaF.lmer.final <- distances.evol.LaF.lmer.0
# Building models from top to bottom
distances.evol.CR.lmer.0 <- lmer(mu ~ 1 + step + dist_type +
step:dist_type +
(1 + step + dist_type | subject),
data=distances.evol.CR)
distances.evol.CR.lmer.1 <- update(distances.evol.CR.lmer.0, . ~ . - step:dist_type) # Don't keep dist_type
distances.evol.CR.lmer.2 <- update(distances.evol.CR.lmer.1, . ~ . - dist_type)
distances.evol.CR.lmer.3 <- update(distances.evol.CR.lmer.2, . ~ . - step)
# Comparing models from bottom to top
distances.evol.CR.comparison <- anova(distances.evol.CR.lmer.3,
distances.evol.CR.lmer.2,
distances.evol.CR.lmer.1,
distances.evol.CR.lmer.0)
print(distances.evol.CR.comparison)
distances.evol.CR.lmer.final <- update(distances.evol.CR.lmer.0, . ~ . - dist_type)
summary(distances.evol.lmer.final)
summary(distances.evol.LaF.lmer.final)
summary(distances.evol.CR.lmer.final)
source('~/LabelTime/stats/LookingTimeGraph.R')
source('~/LabelTime/stats/HiddenRepresentationsGraph.R')
source('~/LabelTime/stats/LookingTimeGraph.R')
?rename
source('~/LabelTime/stats/LookingTimeGraph.R')
source('~/LabelTime/stats/LookingTimeGraph.R')
source('~/LabelTime/stats/LookingTimeGraph.R')
source('~/LabelTime/stats/LookingTimeGraph.R')
# LIBRARY IMPORTS
library(ggplot2)
library(Hmisc)
# DATA HANDLING
# Import data, from both Category and SingleObject
LT.SingObj <- read.csv("../results/SingleObject_LT.csv", head=TRUE)
LT.Cat <- read.csv("../results/Category_LT.csv", head=TRUE)
# Create experiment variable for each dataset
LT.SingObj$experiment <- factor("Single Object")
LT.Cat$experiment <- factor("Category")
# Merge both datasets
LT.data <- rbind(LT.SingObj, LT.Cat)
# Set all factor variables to factors, with labels if meaningful
LT.data$explo_overlap <- factor(LT.data$explo_overlap)
LT.data$theory <- factor(LT.data$theory, labels = c("Compound Representations",
"Labels as Features"))
# Transform trial number to start at 1
LT.data$trial <- LT.data$trial + 1
LT.data <- plyr::rename(LT.data, c("subject" = "sub"))
source('~/LabelTime/stats/LookingTimeGraph.R')
source('~/LabelTime/stats/LookingTimeGraph.R')
source('~/LabelTime/stats/LookingTimeGraph.R')
source('~/LabelTime/stats/HiddenRepresentationsGraph.R')
source('~/LabelTime/stats/HiddenRepresentationsGraph.R')
source('~/LabelTime/stats/HiddenRepresentationsGraph.R')
source('~/LabelTime/stats/LookingTimeGraph.R')
source('~/LabelTime/stats/LookingTimeGraph.R')
source('~/LabelTime/stats/LookingTimeGraph.R')
source('~/LabelTime/stats/LookingTimeGraph.R')
?ggsave
source('~/LabelTime/stats/LookingTimeGraph.R')
source('~/LabelTime/stats/LookingTimeGraph.R')
source('~/LabelTime/stats/HiddenRepresentationsGraph.R')
source('~/LabelTime/stats/HiddenRepresentationsGraph.R')
source('~/LabelTime/stats/HiddenRepresentationsGraph.R')
?ggsave
source('~/LabelTime/stats/LookingTimeGraph.R')
?theme_bw
source('~/LabelTime/stats/LookingTimeGraph.R')
source('~/LabelTime/stats/HiddenRepresentationsGraph.R')
source('~/LabelTime/stats/HiddenRepresentationsGraph.R')
?ggsave
source('~/LabelTime/stats/HiddenRepresentationsGraph.R')
source('~/LabelTime/stats/LookingTimeGraph.R')
source('~/LabelTime/stats/LookingTimeGraph.R')
source('~/LabelTime/stats/HiddenRepresentationsGraph.R')
source('~/LabelTime/stats/LookingTimeGraph.R')
source('~/LabelTime/stats/CategoryStructure.R')
source('~/LabelTime/stats/CategoryStructure.R')
source('~/LabelTime/stats/CategoryStructure.R')
source('~/LabelTime/stats/CategoryStructure.R')
source('~/LabelTime/stats/CategoryStructure.R')
source('~/LabelTime/stats/CategoryStructure.R')
source('~/LabelTime/stats/CategoryStructure.R')
source('~/LabelTime/stats/CategoryStructure.R')
source('~/LabelTime/stats/CategoryStructure.R')
source('~/LabelTime/stats/CategoryStructure.R')
source('~/LabelTime/stats/CategoryStructure.R')
source('~/LabelTime/stats/CategoryStructure.R')
source('~/LabelTime/stats/CategoryStructure.R')
source('~/LabelTime/stats/CategoryStructure.R')
source('~/LabelTime/stats/CategoryStructure.R')
source('~/LabelTime/stats/CategoryStructure.R')
source('~/LabelTime/stats/CategoryStructure.R')
source('~/LabelTime/stats/HiddenRepresentationsGraph.R')
source('~/LabelTime/stats/HiddenRepresentationsGraph.R')
